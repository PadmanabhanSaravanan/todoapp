name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
  workflow_dispatch:

env:
  CREDENTIALS: ${{ secrets.GCP_SA_KEY }} 
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: gke-cluster    # cluster name
  GKE_REGION: us-east1
  GKE_LOCATION: us-east1-b   # cluster location
  SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

jobs:
  create-cluster:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }} 

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.GKE_REGION }}
          TF_VAR_location: ${{ env.GKE_LOCATION }}
          TF_VAR_cluster_name: ${{ env.GKE_CLUSTER }}
          TF_VAR_service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.GKE_REGION }}
          TF_VAR_location: ${{ env.GKE_LOCATION }}
          TF_VAR_cluster_name: ${{ env.GKE_CLUSTER }}
          TF_VAR_service_account: ${{ env.SERVICE_ACCOUNT }}

  deploy-application-cluster:
    runs-on: ubuntu-latest
    needs: create-cluster
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Google Cloud SDK
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ env.CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure kubectl to use gke-gcloud-auth-plugin
        run: gcloud components install kubectl

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_LOCATION }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy application to GKE
        run: kubectl apply -f deployment.yaml

      # - name: Wait for External IP and Port
      #   id: get_ip_port
      #   run: |
      #     echo "Waiting for service to get external IP..."
      #     until [ "$(kubectl get svc todo-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" != "" ]; do
      #       sleep 10
      #     done
      #     NODE_EXTERNAL_IP=$(kubectl get svc todo-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      #     NODE_PORT=$(kubectl get svc todo-app-service -o jsonpath='{.spec.ports[0].nodePort}')
      #     echo "NODE_EXTERNAL_IP=$NODE_EXTERNAL_IP" >> $GITHUB_ENV
      #     echo "NODE_PORT=$NODE_PORT" >> $GITHUB_ENV

  destroy-deploymet:
    runs-on: ubuntu-latest
    needs: deploy-application-cluster
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Install Newman
      #   run: |
      #     npm install -g newman

      # - name: Debug Environment Variables
      #   run: |
      #     echo "NODE_EXTERNAL_IP=${{ env.NODE_EXTERNAL_IP }}"
      #     echo "NODE_PORT=${{ env.NODE_PORT }}"

      # - name: Run Postman Collection
      #   run: |
      #     newman run postman_collection.json \
      #     --env-var "baseUrl=http://${{ env.NODE_EXTERNAL_IP }}:${{ env.NODE_PORT }}"

      - name: Destroy deployment from GKE
        run: kubectl delete -f deployment.yaml

  destroy-resources:
    runs-on: ubuntu-latest
    needs: destroy-deploymet
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ env.CREDENTIALS }}
          TF_VAR_project_id: ${{ env.PROJECT_ID }}
          TF_VAR_region: ${{ env.GKE_REGION }}
          TF_VAR_location: ${{ env.GKE_LOCATION }}
          TF_VAR_cluster_name: ${{ env.GKE_CLUSTER }}
          TF_VAR_service_account: ${{ env.SERVICE_ACCOUNT }}
